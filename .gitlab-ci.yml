#####################################
# FENCE - GitLab CI/CD Configuration #
#####################################

default:
  image: python:3.12

before_script:
  - pip install poetry
  - poetry install
  - source `poetry env info --path`/bin/activate

stages:
  - test
  - build
  - release

# Define cache
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"

cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - .cache/pip
    - .cache/poetry

### Stages ###

testing:
  stage: test
  script:
    - echo "üß™ Running tests..."
    - cd tests
    - export OPENAI_API_KEY=$OPENAI_API_KEY
    - python3 -m pytest --junitxml=report.xml
    - ls -la # Debugging step to verify the presence of report.xml
  artifacts:
    when: always
    reports:
      junit: tests/report.xml # Adjusted path to report.xml
  only:
    - main

building:
  stage: build
  script:
    - echo "üèóÔ∏è Building the package..."
    - poetry build
  artifacts:
    paths:
      - dist/*
    expire_in: 1 week
  only:
    - main

publish:
  stage: release
  script:
    - echo "üöÄ Publishing the package..."
    # Build the package (creates .whl and .tar.gz files)
    - poetry build

    # Set GitLab as the package repository
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi

    # Ignoring certificates can be needed for self-hosted GitLab instances
    # - poetry config certificates.gitlab.cert false

    # Publish the package to the GitLab repository
    - poetry publish --repository gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}

  only:
    - main
